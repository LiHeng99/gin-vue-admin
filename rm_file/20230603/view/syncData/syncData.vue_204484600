<template>
  <div>
    <div class="gva-search-box">
      <el-form :inline="true" :model="searchInfo" class="demo-form-inline" @keyup.enter="onSubmit">
      <el-form-item label="创建时间">
      <el-date-picker v-model="searchInfo.startCreatedAt" type="datetime" placeholder="开始时间"></el-date-picker>
       —
      <el-date-picker v-model="searchInfo.endCreatedAt" type="datetime" placeholder="结束时间"></el-date-picker>
      </el-form-item>
        <el-form-item label="任务名称">
         <el-input v-model="searchInfo.taskName" placeholder="搜索条件" />

        </el-form-item>
        <el-form-item label="源数据库ID">
            
             <el-input v-model.number="searchInfo.sourceDbId" placeholder="搜索条件" />

        </el-form-item>
        <el-form-item label="同步类型">
            
             <el-input v-model.number="searchInfo.syncType" placeholder="搜索条件" />

        </el-form-item>
        <el-form-item label="同步方向">
            
             <el-input v-model.number="searchInfo.syncDirection" placeholder="搜索条件" />

        </el-form-item>
        <el-form-item label="描述">
         <el-input v-model="searchInfo.readme" placeholder="搜索条件" />

        </el-form-item>
        <el-form-item label="表信息ID">
         <el-input v-model="searchInfo.tableInfoId" placeholder="搜索条件" />

        </el-form-item>
        <el-form-item>
          <el-button type="primary" icon="search" @click="onSubmit">查询</el-button>
          <el-button icon="refresh" @click="onReset">重置</el-button>
        </el-form-item>
      </el-form>
    </div>
    <div class="gva-table-box">
        <div class="gva-btn-list">
            <el-button type="primary" icon="plus" @click="openDialog">新增</el-button>
            <el-popover v-model:visible="deleteVisible" placement="top" width="160">
            <p>确定要删除吗？</p>
            <div style="text-align: right; margin-top: 8px;">
                <el-button type="primary" link @click="deleteVisible = false">取消</el-button>
                <el-button type="primary" @click="onDelete">确定</el-button>
            </div>
            <template #reference>
                <el-button icon="delete" style="margin-left: 10px;" :disabled="!multipleSelection.length" @click="deleteVisible = true">删除</el-button>
            </template>
            </el-popover>
        </div>
        <el-table
        ref="multipleTable"
        style="width: 100%"
        tooltip-effect="dark"
        :data="tableData"
        row-key="ID"
        @selection-change="handleSelectionChange"
        >
        <el-table-column type="selection" width="55" />
        <el-table-column align="left" label="日期" width="180">
            <template #default="scope">{{ formatDate(scope.row.CreatedAt) }}</template>
        </el-table-column>
        <el-table-column align="left" label="任务名称" prop="taskName" width="120" />
        <el-table-column align="left" label="源数据库ID" prop="sourceDbId" width="120" />
        <el-table-column align="left" label="目标数据ID" prop="targetDbId" width="120" />
        <el-table-column align="left" label="同步类型" prop="syncType" width="120" />
        <el-table-column align="left" label="同步方向" prop="syncDirection" width="120" />
        <el-table-column align="left" label="描述" prop="readme" width="120" />
        <el-table-column align="left" label="表信息ID" prop="tableInfoId" width="120" />
        <el-table-column align="left" label="按钮组">
            <template #default="scope">
            <el-button type="primary" link icon="edit" class="table-button" @click="updateSyncDataModelFunc(scope.row)">变更</el-button>
            <el-button type="primary" link icon="delete" @click="deleteRow(scope.row)">删除</el-button>
            </template>
        </el-table-column>
        </el-table>
        <div class="gva-pagination">
            <el-pagination
            layout="total, sizes, prev, pager, next, jumper"
            :current-page="page"
            :page-size="pageSize"
            :page-sizes="[10, 30, 50, 100]"
            :total="total"
            @current-change="handleCurrentChange"
            @size-change="handleSizeChange"
            />
        </div>
    </div>
    <el-dialog v-model="dialogFormVisible" :before-close="closeDialog" title="弹窗操作">
      <el-form :model="formData" label-position="right" ref="elFormRef" :rules="rule" label-width="80px">
        <el-form-item label="任务名称:"  prop="taskName" >
          <el-input v-model="formData.taskName" :clearable="true"  placeholder="请输入" />
        </el-form-item>
        <el-form-item label="源数据库ID:"  prop="sourceDbId" >
          <el-input v-model.number="formData.sourceDbId" :clearable="true" placeholder="请输入" />
        </el-form-item>
        <el-form-item label="目标数据ID:"  prop="targetDbId" >
          <el-input v-model.number="formData.targetDbId" :clearable="true" placeholder="请输入" />
        </el-form-item>
        <el-form-item label="同步类型:"  prop="syncType" >
          <el-input v-model.number="formData.syncType" :clearable="true" placeholder="请输入" />
        </el-form-item>
        <el-form-item label="同步方向:"  prop="syncDirection" >
          <el-input v-model.number="formData.syncDirection" :clearable="true" placeholder="请输入" />
        </el-form-item>
        <el-form-item label="描述:"  prop="readme" >
          <el-input v-model="formData.readme" :clearable="true"  placeholder="请输入" />
        </el-form-item>
        <el-form-item label="表信息ID:"  prop="tableInfoId" >
          <el-input v-model="formData.tableInfoId" :clearable="true"  placeholder="请输入" />
        </el-form-item>
      </el-form>
      <template #footer>
        <div class="dialog-footer">
          <el-button @click="closeDialog">取 消</el-button>
          <el-button type="primary" @click="enterDialog">确 定</el-button>
        </div>
      </template>
    </el-dialog>
  </div>
</template>

<script>
export default {
  name: 'SyncDataModel'
}
</script>

<script setup>
import {
  createSyncDataModel,
  deleteSyncDataModel,
  deleteSyncDataModelByIds,
  updateSyncDataModel,
  findSyncDataModel,
  getSyncDataModelList
} from '@/api/syncData'

// 全量引入格式化工具 请按需保留
import { getDictFunc, formatDate, formatBoolean, filterDict } from '@/utils/format'
import { ElMessage, ElMessageBox } from 'element-plus'
import { ref, reactive } from 'vue'

// 自动化生成的字典（可能为空）以及字段
const formData = ref({
        taskName: '',
        sourceDbId: 0,
        targetDbId: 0,
        syncType: 0,
        syncDirection: 0,
        readme: '',
        tableInfoId: '',
        })

// 验证规则
const rule = reactive({
               taskName : [{
                   required: true,
                   message: '',
                   trigger: ['input','blur'],
               }],
               sourceDbId : [{
                   required: true,
                   message: '',
                   trigger: ['input','blur'],
               }],
               targetDbId : [{
                   required: true,
                   message: '',
                   trigger: ['input','blur'],
               }],
               syncType : [{
                   required: true,
                   message: '',
                   trigger: ['input','blur'],
               }],
               syncDirection : [{
                   required: true,
                   message: '',
                   trigger: ['input','blur'],
               }],
               tableInfoId : [{
                   required: true,
                   message: '',
                   trigger: ['input','blur'],
               }],
})

const elFormRef = ref()


// =========== 表格控制部分 ===========
const page = ref(1)
const total = ref(0)
const pageSize = ref(10)
const tableData = ref([])
const searchInfo = ref({})

// 重置
const onReset = () => {
  searchInfo.value = {}
  getTableData()
}

// 搜索
const onSubmit = () => {
  page.value = 1
  pageSize.value = 10
  getTableData()
}

// 分页
const handleSizeChange = (val) => {
  pageSize.value = val
  getTableData()
}

// 修改页面容量
const handleCurrentChange = (val) => {
  page.value = val
  getTableData()
}

// 查询
const getTableData = async() => {
  const table = await getSyncDataModelList({ page: page.value, pageSize: pageSize.value, ...searchInfo.value })
  if (table.code === 0) {
    tableData.value = table.data.list
    total.value = table.data.total
    page.value = table.data.page
    pageSize.value = table.data.pageSize
  }
}

getTableData()

// ============== 表格控制部分结束 ===============

// 获取需要的字典 可能为空 按需保留
const setOptions = async () =>{
}

// 获取需要的字典 可能为空 按需保留
setOptions()


// 多选数据
const multipleSelection = ref([])
// 多选
const handleSelectionChange = (val) => {
    multipleSelection.value = val
}

// 删除行
const deleteRow = (row) => {
    ElMessageBox.confirm('确定要删除吗?', '提示', {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning'
    }).then(() => {
            deleteSyncDataModelFunc(row)
        })
    }


// 批量删除控制标记
const deleteVisible = ref(false)

// 多选删除
const onDelete = async() => {
      const ids = []
      if (multipleSelection.value.length === 0) {
        ElMessage({
          type: 'warning',
          message: '请选择要删除的数据'
        })
        return
      }
      multipleSelection.value &&
        multipleSelection.value.map(item => {
          ids.push(item.ID)
        })
      const res = await deleteSyncDataModelByIds({ ids })
      if (res.code === 0) {
        ElMessage({
          type: 'success',
          message: '删除成功'
        })
        if (tableData.value.length === ids.length && page.value > 1) {
          page.value--
        }
        deleteVisible.value = false
        getTableData()
      }
    }

// 行为控制标记（弹窗内部需要增还是改）
const type = ref('')

// 更新行
const updateSyncDataModelFunc = async(row) => {
    const res = await findSyncDataModel({ ID: row.ID })
    type.value = 'update'
    if (res.code === 0) {
        formData.value = res.data.resyncDataTask
        dialogFormVisible.value = true
    }
}


// 删除行
const deleteSyncDataModelFunc = async (row) => {
    const res = await deleteSyncDataModel({ ID: row.ID })
    if (res.code === 0) {
        ElMessage({
                type: 'success',
                message: '删除成功'
            })
            if (tableData.value.length === 1 && page.value > 1) {
            page.value--
        }
        getTableData()
    }
}

// 弹窗控制标记
const dialogFormVisible = ref(false)

// 打开弹窗
const openDialog = () => {
    type.value = 'create'
    dialogFormVisible.value = true
}

// 关闭弹窗
const closeDialog = () => {
    dialogFormVisible.value = false
    formData.value = {
        taskName: '',
        sourceDbId: 0,
        targetDbId: 0,
        syncType: 0,
        syncDirection: 0,
        readme: '',
        tableInfoId: '',
        }
}
// 弹窗确定
const enterDialog = async () => {
     elFormRef.value?.validate( async (valid) => {
             if (!valid) return
              let res
              switch (type.value) {
                case 'create':
                  res = await createSyncDataModel(formData.value)
                  break
                case 'update':
                  res = await updateSyncDataModel(formData.value)
                  break
                default:
                  res = await createSyncDataModel(formData.value)
                  break
              }
              if (res.code === 0) {
                ElMessage({
                  type: 'success',
                  message: '创建/更改成功'
                })
                closeDialog()
                getTableData()
              }
      })
}
</script>

<style>
</style>
